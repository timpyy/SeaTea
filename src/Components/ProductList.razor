@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService



<div class="search-div">
    <div class="row">
        <div class="col">
          
            <input placeholder="Enter store name" type="text" class="search-box" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" />
            <button @onclick="(e => EnableFilterData())" class="btn btn-success filter-btn">Filter</button>
            <button @onclick="(e => ClearFilterData())" id="clearButton" class="btn btn-danger clear-btn">Clear</button>
        </div>
    </div>

</div>

<hr />


<div>
    <div class="row">
        <div class="col">
            <label>Filter by Neighborhood</label>
            <select id="neighborhoodSelect" @onchange="(e => UpdateNeighborhoodFilterText(e.Value.ToString()))">
                <option value="">All</option>
                <option value="University District">University District</option>
                <option value="International District">International District</option>
                <option value="South Lake Union">South Lake Union</option>
                <option value="West Lake">West Lake</option>
                <option value="Queen Anne">Queen Anne</option>
                <option value="Capitol Hill">Capitol Hill</option>
                <option value="Fremont">Fremont</option> 
            </select>
        </div>
    </div>
</div>

<div class="container-fluid">
    @{
        
        // Sets product list to get all data.

        var productList = ProductService.GetAllData();

        /// Order the list alphabetical
        productList = productList.OrderBy(m => m.Title);

        /// If filter is enabled, reduce the data set to the filter string
        if (FilterData && FilterNeighborhood)
        {
            productList = productList.Where(m => m.Title.Contains(FilterDataString));
            productList = productList.Where(m => m.Neighborhood.Contains(FilterNeighborhoodString));
        }

        else if (FilterData && !FilterNeighborhood)
        {
            productList = productList.Where(m => m.Title.Contains(FilterDataString));
        }

        else if(!FilterData && FilterNeighborhood)
        {
            productList = productList.Where(m => m.Neighborhood.Contains(FilterNeighborhoodString));
        }

        if (productList.Any())
        {
            <div class="row">
                <div class="card-columns">
                    @foreach (var product in productList)
                    {
                        <div class="card">
                            <div class="card-img" style="background-image: url('@product.Image');">
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@product.Title</h5>
                            </div>
                            <div class="card-footer">
                                <small class="text-muted">
                                    <button @onclick="(e => SelectProduct(product.Id))" id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary">More Info</button>
                                </small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        
    }
</div>



@if(selectedProduct != null)
{
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="card">
            <div class="card-img" style="background-image: url('@selectedProduct.Image');">
            </div>
            <div class="card-body">
                <p class="card-text">@selectedProduct.Description</p>
            </div>
          </div>
        </div>
                <div class="modal-footer">
                    <div class="row">

                        <div class="col comment-a ">
                            <p><h4>Comments <i class="fa fa-comment "></i></h4></p>
                            <ul class=" list-group ">
                                @{

                                    // First show all the existing comments

                                    foreach (var comment in selectedProduct.CommentList)

                                    {
                                        <li class="list-group-item rounded border border-info comment-b">

                                            <i class="fa fa-user"></i>
                                            @comment.Comment


                                        </li>

                                    }



                                    // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button

                                    if (NewComment)

                                    {

                                        <div class="row">

                                            <div class="col">

                                                <input type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" id="commentInput" value="@NewCommentText" />

                                                <button @onclick="(e => AddComment())" class="btn btn-success" id="saveInput" modal">Save Comment</button>

                                            </div>

                                        </div>

                                    }



                                    // If this is not a new comment, then show the buttons for Adding comment and Close

                                    if (NewComment == false)

                                    {

                                        <div class="row">

                                            <div class="col">

                                                <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-primary">Add Comment</button>

                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                                            </div>

                                        </div>

                                    }

                                }
                            </ul>
                        </div>
                    </div>
                    @if (voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }

                </div>
      </div>
        
    </div>
  </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    // Selected Product is set to product model.
    ProductModel selectedProduct;
    // Declares string for product id.
    string selectedProductId;
    [Parameter]
    public IEnumerable<ProductModel> Products { get; set; }

    /// <summary>
    /// The purpose of this file is to select a product
    /// based off the id because we want to make sure we are updating
    /// the right store.
    /// </summary>
    /// <param name="productId"></param>
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    //Sets curr rating and votecount to 0.
    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    /// <summary>
    /// The purpose of the class is to get the current rating
    /// for a boba store.
    /// </summary>
    void GetCurrentRating()
    {
        if(selectedProduct.Ratings == null)
        {
            //Set current to 0.
            currentRating = 0;
            //Set vote count to 0.
            voteCount = 0;
        }
        else
        {
            //Else with the current ratings.
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    /// <summary>
    /// Becuase we want to update ratings, this class ensures that the new
    /// rating is updated.
    /// </summary>
    /// <param name="rating"></param>
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    //Set new comment to false and as an empty string.
    bool NewComment = false;
    string NewCommentText = "";

    /// <summary>
    /// The purpose of this class is to show the new comment.
    /// </summary>
    void ShowNewCommentInput()
    {
        NewComment = true;
    }
    /// <param name="newCommentText"></param>
    /// Updates the comment text
    void UpdateCommentText(string newCommentText)
    {
        //Sets the comments.

        NewCommentText = newCommentText;

    }

    /// <param name="comment"></param>
    /// The purpose of this file is to add comments to store.
    void AddComment()
    {
        ///Add a new comment.
        ///
        if (NewCommentText.Length > 0)
        {
            selectedProduct.CommentList.Add(new CommentModel() { Comment = NewCommentText });
        }
        ProductService.UpdateData(selectedProduct);
        NewComment = false;
    }

    //Initialize FilterDataString that stores user input in the filter box
    string FilterDataString = "";
    //Initialize FilterNeighborhoodString that updates to whatever neighborhood is selected in the dropdown
    string FilterNeighborhoodString = "";
    //Initialize FilterData flag
    bool FilterData = false;
    //Initialize FilterNeighborhood flag
    bool FilterNeighborhood = false;

    /// <summary>
    /// The purpose of this function is to update filter text from the text box
    /// </summary>
    /// <param name="text"></param>
    void UpdateFilterText(string text)
    {
        FilterDataString = text;
    }
    /// <summary>
    /// The purpose of this function is to update neighborhood filter text.
    /// </summary>
    /// <param name="text"></param>
    void UpdateNeighborhoodFilterText(string text)
    {
        FilterNeighborhoodString = text;
        //Set filter neighborhood flag to true only if a neighborhood is selected in dropdown
        if(FilterNeighborhoodString != "")
        {
            //Filter neighbor hood is set to true.
            FilterNeighborhood = true;
        }
    }
    /// <summary>
    /// The purpose of this class is to enable data filter.
    /// </summary>
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = true;
    }
    /// <summary>
    /// The purpose of this class is to enable the clear data filter.
    /// </summary>
    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        FilterData = false;
        FilterNeighborhood = false;
    }
}
